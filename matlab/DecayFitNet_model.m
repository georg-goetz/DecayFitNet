function [output, x66, x69, x72, state] = DecayFitNet_model(input, params, varargin)
%DECAYFITNET_MODEL Function implementing an imported ONNX network.
%
% THIS FILE WAS AUTO-GENERATED BY importONNXFunction.
% ONNX Operator Set Version: 9
%
% Variable names in this function are taken from the original ONNX file.
%
% [OUTPUT, X66, X69, X72] = DecayFitNet_model(INPUT, PARAMS)
%			- Evaluates the imported ONNX network DECAYFITNET_MODEL with input(s)
%			INPUT and the imported network parameters in PARAMS. Returns
%			network output(s) in OUTPUT, X66, X69, X72.
%
% [OUTPUT, X66, X69, X72, STATE] = DecayFitNet_model(INPUT, PARAMS)
%			- Additionally returns state variables in STATE. When training,
%			use this form and set TRAINING to true.
%
% [__] = DecayFitNet_model(INPUT, PARAMS, 'NAME1', VAL1, 'NAME2', VAL2, ...)
%			- Specifies additional name-value pairs described below:
%
% 'Training'
% 			Boolean indicating whether the network is being evaluated for
%			prediction or training. If TRAINING is true, state variables
%			will be updated.
%
% 'InputDataPermutation'
%			'auto' - Automatically attempt to determine the permutation
%			 between the dimensions of the input data and the dimensions of
%			the ONNX model input. For example, the permutation from HWCN
%			(MATLAB standard) to NCHW (ONNX standard) uses the vector
%			[4 3 1 2]. See the documentation for IMPORTONNXFUNCTION for
%			more information about automatic permutation.
%
%			'none' - Input(s) are passed in the ONNX model format. See 'Inputs'.
%
%			numeric vector - The permutation vector describing the
%			transformation between input data dimensions and the expected
%			ONNX input dimensions.%
%			cell array - If the network has multiple inputs, each cell
%			contains 'auto', 'none', or a numeric vector.
%
% 'OutputDataPermutation'
%			'auto' - Automatically attempt to determine the permutation
%			between the dimensions of the output and a conventional MATLAB
%			dimension ordering. For example, the permutation from NC (ONNX
%			standard) to CN (MATLAB standard) uses the vector [2 1]. See
%			the documentation for IMPORTONNXFUNCTION for more information
%			about automatic permutation.
%
%			'none' - Return output(s) as given by the ONNX model. See 'Outputs'.
%
%			numeric vector - The permutation vector describing the
%			transformation between the ONNX output dimensions and the
%			desired output dimensions.%
%			cell array - If the network has multiple outputs, each cell
%			contains 'auto', 'none' or a numeric vector.
%
% Inputs:
% -------
% INPUT
%			- Input(s) to the ONNX network.
%			  The input size(s) expected by the ONNX file are:
%				  INPUT:		[batch_size, 2400]				Type: FLOAT
%			  By default, the function will try to permute the input(s)
%			  into this dimension ordering. If the default is incorrect,
%			  use the 'InputDataPermutation' argument to control the
%			  permutation.
%
%
% PARAMS	- Network parameters returned by 'importONNXFunction'.
%
%
% Outputs:
% --------
% OUTPUT, X66, X69, X72
%			- Output(s) of the ONNX network.
%			  Without permutation, the size(s) of the outputs are:
%				  OUTPUT:		[batch_size, 3]				Type: FLOAT
%				  X66:		[batch_size, 3]				Type: FLOAT
%				  X69:		[batch_size, 1]				Type: FLOAT
%				  X72:		[batch_size, 3]				Type: FLOAT
%			  By default, the function will try to permute the output(s)
%			  from this dimension ordering into a conventional MATLAB
%			  ordering. If the default is incorrect, use the
%			  'OutputDataPermutation' argument to control the permutation.
%
% STATE		- (Optional) State variables. When TRAINING is true, these will
% 			  have been updated from the original values in PARAMS.State.
%
%
%  See also importONNXFunction

% Preprocess the input data and arguments:
[input, Training, outputDataPerms, anyDlarrayInputs] = preprocessInput(input, params, varargin{:});
% Put all variables into a single struct to implement dynamic scoping:
[Vars, NumDims] = packageVariables(params, {'input'}, {input}, [2]);
% Call the top-level graph function:
[output, x66, x69, x72, NumDims.output, NumDims.x66, NumDims.x69, NumDims.x72, state] = torch_jit_exportGraph1000(input, NumDims.input, Vars, NumDims, Training, params.State);
% Postprocess the output data
[output, x66, x69, x72] = postprocessOutput(output, x66, x69, x72, outputDataPerms, anyDlarrayInputs, Training, varargin{:});
end

function [output, x66, x69, x72, outputNumDims1044, x66NumDims1045, x69NumDims1046, x72NumDims1047, state] = torch_jit_exportGraph1000(input, inputNumDims1043, Vars, NumDims, Training, state)
% Function implementing the graph 'torch_jit_exportGraph1000'
% Update Vars and NumDims from the graph's formal input parameters. Note that state variables are already in Vars.
Vars.input = input;
NumDims.input = inputNumDims1043;

% Execute the operators:
% Unsqueeze:
[shape, NumDims.x29] = prepareUnsqueezeArgs(Vars.input, Vars.UnsqueezeAxes1001, NumDims.input);
Vars.x29 = reshape(Vars.input, shape);

% Conv:
[weights, bias, stride, dilationFactor, padding, dataFormat, NumDims.x30] = prepareConvArgs(Vars.conv1_weight, Vars.conv1_bias, Vars.ConvStride1002, Vars.ConvDilationFactor1003, Vars.ConvPadding1004, 1, NumDims.x29, NumDims.conv1_weight);
Vars.x30 = dlconv(Vars.x29, weights, bias, 'Stride', stride, 'DilationFactor', dilationFactor, 'Padding', padding, 'DataFormat', dataFormat);

% LeakyRelu:
Vars.x31 = leakyrelu(Vars.x30, 0.000000);
NumDims.x31 = NumDims.x30;

% MaxPool:
[poolsize, stride, padding, dataFormat, NumDims.x32] = prepareMaxPool8Args(Vars.MaxPoolPoolSize1005, Vars.MaxPoolStride1006, Vars.MaxPoolPadding1007, NumDims.x31);
Vars.x32 = maxpool(Vars.x31, poolsize, 'Stride', stride, 'Padding', padding, 'DataFormat', dataFormat);

% Conv:
[weights, bias, stride, dilationFactor, padding, dataFormat, NumDims.x33] = prepareConvArgs(Vars.conv2_weight, Vars.conv2_bias, Vars.ConvStride1008, Vars.ConvDilationFactor1009, Vars.ConvPadding1010, 1, NumDims.x32, NumDims.conv2_weight);
Vars.x33 = dlconv(Vars.x32, weights, bias, 'Stride', stride, 'DilationFactor', dilationFactor, 'Padding', padding, 'DataFormat', dataFormat);

% LeakyRelu:
Vars.x34 = leakyrelu(Vars.x33, 0.000000);
NumDims.x34 = NumDims.x33;

% MaxPool:
[poolsize, stride, padding, dataFormat, NumDims.x35] = prepareMaxPool8Args(Vars.MaxPoolPoolSize1011, Vars.MaxPoolStride1012, Vars.MaxPoolPadding1013, NumDims.x34);
Vars.x35 = maxpool(Vars.x34, poolsize, 'Stride', stride, 'Padding', padding, 'DataFormat', dataFormat);

% Conv:
[weights, bias, stride, dilationFactor, padding, dataFormat, NumDims.x36] = prepareConvArgs(Vars.conv3_weight, Vars.conv3_bias, Vars.ConvStride1014, Vars.ConvDilationFactor1015, Vars.ConvPadding1016, 1, NumDims.x35, NumDims.conv3_weight);
Vars.x36 = dlconv(Vars.x35, weights, bias, 'Stride', stride, 'DilationFactor', dilationFactor, 'Padding', padding, 'DataFormat', dataFormat);

% LeakyRelu:
Vars.x37 = leakyrelu(Vars.x36, 0.000000);
NumDims.x37 = NumDims.x36;

% MaxPool:
[poolsize, stride, padding, dataFormat, NumDims.x38] = prepareMaxPool8Args(Vars.MaxPoolPoolSize1017, Vars.MaxPoolStride1018, Vars.MaxPoolPadding1019, NumDims.x37);
Vars.x38 = maxpool(Vars.x37, poolsize, 'Stride', stride, 'Padding', padding, 'DataFormat', dataFormat);

% Shape:
[Vars.x39, NumDims.x39] = onnxShape(Vars.input, NumDims.input);

% Gather:
[Vars.x41, NumDims.x41] = onnxGather(Vars.x39, Vars.x40, 0, NumDims.x39, NumDims.x40);

% Unsqueeze:
[shape, NumDims.x43] = prepareUnsqueezeArgs(Vars.x41, Vars.UnsqueezeAxes1020, NumDims.x41);
Vars.x43 = reshape(Vars.x41, shape);

% Concat:
[dim, NumDims.x45] = prepareConcatArgs(0, [NumDims.x43, NumDims.x73]);
Vars.x45 = cat(dim, Vars.x43, Vars.x73);

% Reshape:
[shape, NumDims.x46] = prepareReshapeArgs(Vars.x38, Vars.x45, NumDims.x38);
Vars.x46 = reshape(Vars.x38, shape{:});

% Gemm:
[A, B, C, alpha, beta, NumDims.x47] = prepareGemmArgs(Vars.x46, Vars.input_weight, Vars.input_bias, Vars.Gemmalpha1021, Vars.Gemmbeta1022, 0, 1, NumDims.input_bias);
Vars.x47 = alpha*B*A + beta*C;

% LeakyRelu:
Vars.x48 = leakyrelu(Vars.x47, 0.000000);
NumDims.x48 = NumDims.x47;

% Gemm:
[A, B, C, alpha, beta, NumDims.x49] = prepareGemmArgs(Vars.x48, Vars.linears_0_weight, Vars.linears_0_bias, Vars.Gemmalpha1023, Vars.Gemmbeta1024, 0, 1, NumDims.linears_0_bias);
Vars.x49 = alpha*B*A + beta*C;

% LeakyRelu:
Vars.x50 = leakyrelu(Vars.x49, 0.000000);
NumDims.x50 = NumDims.x49;

% Gemm:
[A, B, C, alpha, beta, NumDims.x51] = prepareGemmArgs(Vars.x50, Vars.linears_1_weight, Vars.linears_1_bias, Vars.Gemmalpha1025, Vars.Gemmbeta1026, 0, 1, NumDims.linears_1_bias);
Vars.x51 = alpha*B*A + beta*C;

% LeakyRelu:
Vars.x52 = leakyrelu(Vars.x51, 0.000000);
NumDims.x52 = NumDims.x51;

% Gemm:
[A, B, C, alpha, beta, NumDims.x53] = prepareGemmArgs(Vars.x52, Vars.final1_t_weight, Vars.final1_t_bias, Vars.Gemmalpha1027, Vars.Gemmbeta1028, 0, 1, NumDims.final1_t_bias);
Vars.x53 = alpha*B*A + beta*C;

% LeakyRelu:
Vars.x54 = leakyrelu(Vars.x53, 0.000000);
NumDims.x54 = NumDims.x53;

% Gemm:
[A, B, C, alpha, beta, NumDims.x55] = prepareGemmArgs(Vars.x54, Vars.final2_t_weight, Vars.final2_t_bias, Vars.Gemmalpha1029, Vars.Gemmbeta1030, 0, 1, NumDims.final2_t_bias);
Vars.x55 = alpha*B*A + beta*C;

% Pow:
Vars.x57 = power(Vars.x55, Vars.x56);
NumDims.x57 = max(NumDims.x55, NumDims.x56);

% Add:
Vars.output = Vars.x57 + Vars.x58;
NumDims.output = max(NumDims.x57, NumDims.x58);

% Gemm:
[A, B, C, alpha, beta, NumDims.x60] = prepareGemmArgs(Vars.x52, Vars.final1_a_weight, Vars.final1_a_bias, Vars.Gemmalpha1031, Vars.Gemmbeta1032, 0, 1, NumDims.final1_a_bias);
Vars.x60 = alpha*B*A + beta*C;

% LeakyRelu:
Vars.x61 = leakyrelu(Vars.x60, 0.000000);
NumDims.x61 = NumDims.x60;

% Gemm:
[A, B, C, alpha, beta, NumDims.x62] = prepareGemmArgs(Vars.x61, Vars.final2_a_weight, Vars.final2_a_bias, Vars.Gemmalpha1033, Vars.Gemmbeta1034, 0, 1, NumDims.final2_a_bias);
Vars.x62 = alpha*B*A + beta*C;

% Pow:
Vars.x64 = power(Vars.x62, Vars.x63);
NumDims.x64 = max(NumDims.x62, NumDims.x63);

% Add:
Vars.x66 = Vars.x64 + Vars.x65;
NumDims.x66 = max(NumDims.x64, NumDims.x65);

% Gemm:
[A, B, C, alpha, beta, NumDims.x67] = prepareGemmArgs(Vars.x52, Vars.final1_n_weight, Vars.final1_n_bias, Vars.Gemmalpha1035, Vars.Gemmbeta1036, 0, 1, NumDims.final1_n_bias);
Vars.x67 = alpha*B*A + beta*C;

% LeakyRelu:
Vars.x68 = leakyrelu(Vars.x67, 0.000000);
NumDims.x68 = NumDims.x67;

% Gemm:
[A, B, C, alpha, beta, NumDims.x69] = prepareGemmArgs(Vars.x68, Vars.final2_n_weight, Vars.final2_n_bias, Vars.Gemmalpha1037, Vars.Gemmbeta1038, 0, 1, NumDims.final2_n_bias);
Vars.x69 = alpha*B*A + beta*C;

% Gemm:
[A, B, C, alpha, beta, NumDims.x70] = prepareGemmArgs(Vars.x52, Vars.final1_n_slopes_weight, Vars.final1_n_slopes_bias, Vars.Gemmalpha1039, Vars.Gemmbeta1040, 0, 1, NumDims.final1_n_slopes_bias);
Vars.x70 = alpha*B*A + beta*C;

% LeakyRelu:
Vars.x71 = leakyrelu(Vars.x70, 0.000000);
NumDims.x71 = NumDims.x70;

% Gemm:
[A, B, C, alpha, beta, NumDims.x72] = prepareGemmArgs(Vars.x71, Vars.final2_n_slopes_weight, Vars.final2_n_slopes_bias, Vars.Gemmalpha1041, Vars.Gemmbeta1042, 0, 1, NumDims.final2_n_slopes_bias);
Vars.x72 = alpha*B*A + beta*C;

% Set graph output arguments from Vars and NumDims:
output = Vars.output;
outputNumDims1044 = NumDims.output;
x66 = Vars.x66;
x66NumDims1045 = NumDims.x66;
x69 = Vars.x69;
x69NumDims1046 = NumDims.x69;
x72 = Vars.x72;
x72NumDims1047 = NumDims.x72;
% Set output state from Vars:
state = updateStruct(state, Vars);
end

function [inputDataPerms, outputDataPerms, Training] = parseInputs(input, numDataOutputs, params, varargin)
% Function to validate inputs to DecayFitNet_model:
p = inputParser;
isValidArrayInput = @(x)isnumeric(x) || isstring(x);
isValidONNXParameters = @(x)isa(x, 'ONNXParameters');
addRequired(p, 'input', isValidArrayInput);
addRequired(p, 'params', isValidONNXParameters);
addParameter(p, 'InputDataPermutation', 'auto');
addParameter(p, 'OutputDataPermutation', 'auto');
addParameter(p, 'Training', false);
parse(p, input, params, varargin{:});
inputDataPerms = p.Results.InputDataPermutation;
outputDataPerms = p.Results.OutputDataPermutation;
Training = p.Results.Training;
if isnumeric(inputDataPerms)
    inputDataPerms = {inputDataPerms};
end
if isstring(inputDataPerms) && isscalar(inputDataPerms) || ischar(inputDataPerms)
    inputDataPerms = repmat({inputDataPerms},1,1);
end
if isnumeric(outputDataPerms)
    outputDataPerms = {outputDataPerms};
end
if isstring(outputDataPerms) && isscalar(outputDataPerms) || ischar(outputDataPerms)
    outputDataPerms = repmat({outputDataPerms},1,numDataOutputs);
end
end

function [input, Training, outputDataPerms, anyDlarrayInputs] = preprocessInput(input, params, varargin)
% Parse input arguments
[inputDataPerms, outputDataPerms, Training] = parseInputs(input, 4, params, varargin{:});
anyDlarrayInputs = any(cellfun(@(x)isa(x, 'dlarray'), {input}));
% Make the input variables into unlabelled dlarrays:
input = makeUnlabeledDlarray(input);
% Permute inputs if requested:
input = permuteInputVar(input, inputDataPerms{1}, 2);
% Check input size(s):
checkInputSize(size(input), {'batch_size' 2400}, "input");
end

function [output, x66, x69, x72] = postprocessOutput(output, x66, x69, x72, outputDataPerms, anyDlarrayInputs, Training, varargin)
% Set output type:
if ~anyDlarrayInputs && ~Training
    output = extractdata(output);
    x66 = extractdata(x66);
    x69 = extractdata(x69);
    x72 = extractdata(x72);
end
% Permute outputs if requested:
output = permuteOutputVar(output, outputDataPerms{1}, 2);
x66 = permuteOutputVar(x66, outputDataPerms{2}, 2);
x69 = permuteOutputVar(x69, outputDataPerms{3}, 2);
x72 = permuteOutputVar(x72, outputDataPerms{4}, 2);
end


%% dlarray functions implementing ONNX operators:

function [Y, numDimsY] = onnxGather(X, ONNXIdx, ONNXAxis, numDimsX, numDimsIdx)
% Function implementing the ONNX Gather operator

% In ONNX, 'Gather' first indexes into dimension ONNXAxis of data, using
% the contents of ONNXIdx as the indices. Then, it reshapes the ONNXAxis
% into the shape of ONNXIdx.
%   Example 1:
% Suppose data has shape [2 3 4 5], ONNXIdx has shape [6 7], and axis=1.
% The result has shape [2 6 7 4 5].
%   Example 2:
% Suppose data has shape [2 3 4 5], ONNXIdx has shape [6], and axis=1.
% The result has shape [2 6 4 5].
%   Example 3:
% Suppose data has shape [2 3 4 5], ONNXIdx has shape [] (a scalar), and axis=1.
% The result has shape [2 4 5].
%
% Since we're using reverse indexing relative to ONNX, in this function
% data and ONNXIdx both have reversed dimension ordering.
numDimsY = numDimsIdx + (numDimsX - 1);
if isempty(X)
    Y = X;
    return;
end
% (1) First, do the subsref part of Gather
if ONNXAxis<0
    ONNXAxis = ONNXAxis + numDimsX;                                 % Axis can be negative. Convert it to its positive equivalent.
end
% ONNXIdx is origin-0 in ONNX, so add 1
mlIdx  = extractdata(ONNXIdx) + 1;
% Convert axis to DLT. ONNXAxis is origin 0 and we index from the end
mlAxis = numDimsX - ONNXAxis;
% Use subsref to index into data
Indices.subs = repmat({':'}, 1, numDimsX);
Indices.subs{mlAxis} = mlIdx(:);                                          % Index as a column to ensure the output is 1-D in the indexed dimension (for now).
Indices.type = '()';
Y = subsref(X, Indices);
% (2) Now do the reshaping part of Gather
shape = size(Y, 1:numDimsX);
if numDimsIdx == 0
    % Delete the indexed dimension
    shape(mlAxis) = [];
elseif numDimsIdx > 1
    % Reshape the indexed dimension into the shape of ONNXIdx
    shape = [shape(1:mlAxis-1) size(ONNXIdx, 1:numDimsIdx) shape(mlAxis+1:end)];
end
% Extend the shape to 2D so it's valid MATLAB
if numel(shape) < 2
    shape = [shape ones(1,2-numel(shape))];
end
Y = reshape(Y, shape);
end

function [Y, numDimsY] = onnxShape(X, numDimsX)
% Implements the ONNX Shape operator
% Return the reverse ONNX shape as a 1D column vector
switch numDimsX
    case 0
        if isempty(X)
            Y = dlarray(0);
        else
            Y = dlarray(1);
        end
    case 1
        if isempty(X)
            Y = dlarray(0);
        else
            Y = dlarray(size(X,1));
        end
    otherwise
        Y = dlarray(fliplr(size(X, 1:numDimsX))');
end
numDimsY = 1;
end

function [DLTAxis, numDimsY] = prepareConcatArgs(ONNXAxis, numDimsXs)
% Prepares arguments for implementing the ONNX Concat operator
numDimsY = numDimsXs(1);
if ONNXAxis<0
    ONNXAxis = ONNXAxis + numDimsY;
end
DLTAxis = numDimsY - ONNXAxis;
end

function [weights, bias, stride, dilationFactor, padding, dataFormat, numDimsY] = prepareConvArgs(...
    weights, bias, stride, dilationFactor, padding, numWtGroups, numDimsX, numDimsW)
% Prepares arguments for implementing the ONNX Conv operator

% Weights: The ONNX weight dim is Fcxyz..., where c=C/G, G is numGroups,
% and xyz... are spatial dimensions. DLT "weights" here is the flip of
% that, or ...zyxcF. dlconv requires ...zyxcfG, where f=F/G. So reshape to
% split the last dimension.
sizeW    = size(weights, 1:numDimsW);
F        = sizeW(end);
newWSize = [sizeW(1:numDimsW-1), F/numWtGroups, numWtGroups];
weights  = reshape(weights, newWSize);
% bias
if isempty(bias)
    bias = 0;
end
bias = dlarray(bias(:),'CU');
% Derive missing default attributes from weight tensor
numSpatialDims = numDimsW-2;
if isempty(padding)
    padding = zeros(1, 2*numSpatialDims);
end
if isempty(stride)
    stride = ones(1,numSpatialDims);
end
if isempty(dilationFactor)
    dilationFactor = ones(1,numSpatialDims);
end
% Make the attributes non-dlarrays:
if isa(stride, 'dlarray')
    stride = extractdata(stride);
end
if isa(dilationFactor, 'dlarray')
    dilationFactor = extractdata(dilationFactor);
end
if isa(padding, 'dlarray')
    padding = extractdata(padding);
end
% Make the attributes double row vectors, and flip their dimension ordering
% to reverse-onnx:
stride = fliplr(double(stride(:)'));
dilationFactor = fliplr(double(dilationFactor(:)'));
if isnumeric(padding)       % padding can be "same"
    % ONNX: [x1_begin, ..., xn_begin, x1_end, ...,xn_end]
    % DLT:  [xn_begin, ..., x1_begin;
    %        xn_end, ..., x1_end]       (Note the lrflip and semicolon)
    padding = fliplr(transpose(reshape(padding, [], 2)));
end
% Set dataformat and numdims
dataFormat = [repmat('S', 1, numDimsX-2) 'CB'];
numDimsY = numDimsX;
end

function [A, B, C, alpha, beta, numDimsY] = prepareGemmArgs(A, B, C, alpha, beta, transA, transB, numDimsC)
% Prepares arguments for implementing the ONNX Gemm operator
if transA
    A = A';
end
if transB
    B = B';
end
if numDimsC < 2
    C = C(:);   % C can be broadcast to [N M]. Make C a col vector ([N 1])
end
numDimsY = 2;
% Y=B*A because we want (AB)'=B'A', and B and A are already transposed.
end

function [poolsize, stride, padding, dataFormat, numDimsY, numDimsIndices] = prepareMaxPool8Args(poolsize, stride, padding, numDimsX)
% Prepares arguments for implementing the ONNX MaxPool-8 operator
poolsize    = fliplr(extractdata(poolsize(:)'));
stride      = fliplr(extractdata(stride(:)'));
% padding
if isa(padding, 'dlarray')
    padding = extractdata(padding);
end
if isnumeric(padding)
    % ONNX: [x1_begin, ..., xn_begin, x1_end, ...,xn_end]
    % DLT:  [xn_begin, ..., x1_begin;
    %        xn_end, ..., x1_end]       (Note the lrflip and semicolon)
    padding = fliplr(transpose(reshape(padding, [], 2)));
end
dataFormat  = [repmat('S', 1, numDimsX-2) 'CB'];
numDimsY    = numDimsX;
numDimsIndices = numDimsX;                      % New in opset 8
end

function [DLTShape, numDimsY] = prepareReshapeArgs(X, ONNXShape, numDimsX)
% Prepares arguments for implementing the ONNX Reshape operator
ONNXShape = flip(extractdata(ONNXShape));            % First flip the shape to make it correspond to the dimensions of X.
% In ONNX, 0 means "unchanged", and -1 means "infer". In DLT, there is no
% "unchanged", and [] means "infer".
DLTShape = num2cell(ONNXShape);                      % Make a cell array so we can include [].
% Replace zeros with the actual size
if any(ONNXShape==0)
    i0 = find(ONNXShape==0);
    DLTShape(i0) = num2cell(size(X, numDimsX - numel(ONNXShape) + i0));  % right-align the shape vector and dims
end
if any(ONNXShape == -1)
    % Replace -1 with []
    i = ONNXShape == -1;
    DLTShape{i} = [];
end
if numel(DLTShape)==1
    DLTShape = [DLTShape 1];
end
numDimsY = numel(ONNXShape);
end

function [newShape, numDimsY] = prepareUnsqueezeArgs(X, ONNXAxes, numDimsX)
% Prepares arguments for implementing the ONNX Unsqueeze operator

% ONNX axes are origin 0
ONNXAxes = extractdata(ONNXAxes);
ONNXAxes(ONNXAxes<0) = ONNXAxes(ONNXAxes<0) + numDimsX;
ONNXAxes = sort(ONNXAxes);                                              % increasing order
numDimsY = numDimsX + numel(ONNXAxes);
if numDimsY == 1
    newShape = size(X);
else
    DLTAxes  = flip(numDimsY - ONNXAxes);                                  % increasing order
    newShape = ones(1, numDimsY);
    posToSet = setdiff(1:numDimsY, DLTAxes, 'stable');
    newShape(posToSet) = size(X, 1:numel(posToSet));
end
end

%% Utility functions:

function s = appendStructs(varargin)
% s = appendStructs(s1, s2,...). Assign all fields in s1, s2,... into s.
if isempty(varargin)
    s = struct;
else
    s = varargin{1};
    for i = 2:numel(varargin)
        fromstr = varargin{i};
        fs = fieldnames(fromstr);
        for j = 1:numel(fs)
            s.(fs{j}) = fromstr.(fs{j});
        end
    end
end
end

function checkInputSize(inputShape, expectedShape, inputName)

if numel(expectedShape)==0
    % The input is a scalar
    if ~isequal(inputShape, [1 1])
        inputSizeStr = makeSizeString(inputShape);
        error(message('nnet_cnn_onnx:onnx:InputNeedsResize',inputName, "[1,1]", inputSizeStr));
    end
elseif numel(expectedShape)==1
    % The input is a vector
    if ~shapeIsColumnVector(inputShape) || ~iSizesMatch({inputShape(1)}, expectedShape)
        expectedShape{2} = 1;
        expectedSizeStr = makeSizeString(expectedShape);
        inputSizeStr = makeSizeString(inputShape);
        error(message('nnet_cnn_onnx:onnx:InputNeedsResize',inputName, expectedSizeStr, inputSizeStr));
    end
else
    % The input has 2 dimensions or more
    
    % The input dimensions have been reversed; flip them back to compare to the
    % expected ONNX shape.
    inputShape = fliplr(inputShape);
    
    % If the expected shape has fewer dims than the input shape, error.
    if numel(expectedShape) < numel(inputShape)
        expectedSizeStr = strjoin(["[", strjoin(string(expectedShape), ","), "]"], "");
        error(message('nnet_cnn_onnx:onnx:InputHasGreaterNDims', inputName, expectedSizeStr));
    end
    
    % Prepad the input shape with trailing ones up to the number of elements in
    % expectedShape
    inputShape = num2cell([ones(1, numel(expectedShape) - length(inputShape)) inputShape]);
    
    % Find the number of variable size dimensions in the expected shape
    numVariableInputs = sum(cellfun(@(x) isa(x, 'char') || isa(x, 'string'), expectedShape));
    
    % Find the number of input dimensions that are not in the expected shape
    % and cannot be represented by a variable dimension
    nonMatchingInputDims = setdiff(string(inputShape), string(expectedShape));
    numNonMatchingInputDims  = numel(nonMatchingInputDims) - numVariableInputs;
    
    expectedSizeStr = makeSizeString(expectedShape);
    inputSizeStr = makeSizeString(inputShape);
    if numNonMatchingInputDims == 0 && ~iSizesMatch(inputShape, expectedShape)
        % The actual and expected input dimensions match, but in
        % a different order. The input needs to be permuted.
        error(message('nnet_cnn_onnx:onnx:InputNeedsPermute',inputName, expectedSizeStr, inputSizeStr));
    elseif numNonMatchingInputDims > 0
        % The actual and expected input sizes do not match.
        error(message('nnet_cnn_onnx:onnx:InputNeedsResize',inputName, expectedSizeStr, inputSizeStr));
    end
end
end

function doesMatch = iSizesMatch(inputShape, expectedShape)
% Check whether the input and expected shapes match, in order.
% Size elements match if (1) the elements are equal, or (2) the expected
% size element is a variable (represented by a character vector or string)
doesMatch = true;
for i=1:numel(inputShape)
    if ~(isequal(inputShape{i},expectedShape{i}) || ischar(expectedShape{i}) || isstring(expectedShape{i}))
        doesMatch = false;
        return
    end
end
end

function sizeStr = makeSizeString(shape)
sizeStr = strjoin(["[", strjoin(string(shape), ","), "]"], "");
end

function isVec = shapeIsColumnVector(shape)
if numel(shape) == 2 && shape(2) == 1
    isVec = true;
else
    isVec = false;
end
end
function X = makeUnlabeledDlarray(X)
% Make numeric X into an unlabelled dlarray
if isa(X, 'dlarray')
    X = stripdims(X);
elseif isnumeric(X)
    if ~(isa(X,'single') || isa(X,'double'))
        % Make ints double so they can combine with anything without
        % reducting precision
        X = double(X);
    end
    X = dlarray(X);
end
end

function [Vars, NumDims] = packageVariables(params, inputNames, inputValues, inputNumDims)
% inputNames, inputValues are cell arrays. inputRanks is a numeric vector.
Vars = appendStructs(params.Learnables, params.Nonlearnables, params.State);
NumDims = params.NumDimensions;
% Add graph inputs
for i = 1:numel(inputNames)
    Vars.(inputNames{i}) = inputValues{i};
    NumDims.(inputNames{i}) = inputNumDims(i);
end
end

function X = permuteInputVar(X, userDataPerm, onnxNDims)
% Returns reverse-ONNX ordering
if onnxNDims == 0
    return;
elseif onnxNDims == 1 && isvector(X)
    X = X(:);
    return;
elseif isnumeric(userDataPerm)
    % Permute into reverse ONNX ordering
    perm = fliplr(userDataPerm);
elseif isequal(userDataPerm, 'auto') && onnxNDims == 4
    % Permute MATLAB HWCN to reverse onnx (WHCN)
    perm = [2 1 3 4];
else
    % userDataPerm is either 'none' or 'auto' with no default, which means
    % it's already in onnx ordering, so just make it reverse onnx
    perm = max(2,onnxNDims):-1:1;
end
X = permute(X, perm);
end
function Y = permuteOutputVar(Y, userDataPerm, onnxNDims)
switch onnxNDims
    case 0
        perm = [];
    case 1
        if isnumeric(userDataPerm)
            % Use the user's permutation because Y is a column vector which
            % already matches ONNX.
            perm = userDataPerm;
        elseif isequal(userDataPerm, 'auto')
            % Treat the 1D onnx vector as a 2D column and transpose it
            perm = [2 1];
        else
            % userDataPerm is 'none'. Leave Y alone because it already
            % matches onnx.
            perm = [];
        end
    otherwise
        % ndims >= 2
        if isnumeric(userDataPerm)
            % Use the inverse of the user's permutation. This is not just the
            % flip of the permutation vector.
            perm = onnxNDims + 1 - userDataPerm;
        elseif isequal(userDataPerm, 'auto')
            if onnxNDims == 2
                % Permute reverse ONNX CN to DLT CN (do nothing)
                perm = [];
            elseif onnxNDims == 4
                % Permute reverse onnx (WHCN) to MATLAB HWCN
                perm = [2 1 3 4];
            else
                % User wants the output in ONNX ordering, so just reverse it from
                % reverse onnx
                perm = onnxNDims:-1:1;
            end
        else
            % userDataPerm is 'none', so just make it reverse onnx
            perm = onnxNDims:-1:1;
        end
end
if ~isempty(perm)
    Y = permute(Y, perm);
end
end

function s = updateStruct(s, t)
% Set all existing fields in s from fields in t, ignoring extra fields in t.
for name = transpose(fieldnames(s))
    s.(name{1}) = t.(name{1});
end
end
